//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="AIServiceSoap", Namespace="http://tempuri.org/")]
public partial class AIService : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback SwitchBootConfImageOperationCompleted;
    
    private System.Threading.SendOrPostCallback SwitchBootConfLocalOperationCompleted;
    
    private System.Threading.SendOrPostCallback ClientLogOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetConfigOperationCompleted;
    
    private System.Threading.SendOrPostCallback CreateConfigOperationCompleted;
    
    /// <remarks/>
    public AIService() {
        this.Url = "http://localhost:8080/Service.asmx";
    }
    
    /// <remarks/>
    public event SwitchBootConfImageCompletedEventHandler SwitchBootConfImageCompleted;
    
    /// <remarks/>
    public event SwitchBootConfLocalCompletedEventHandler SwitchBootConfLocalCompleted;
    
    /// <remarks/>
    public event ClientLogCompletedEventHandler ClientLogCompleted;
    
    /// <remarks/>
    public event GetConfigCompletedEventHandler GetConfigCompleted;
    
    /// <remarks/>
    public event CreateConfigCompletedEventHandler CreateConfigCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SwitchBootConfImage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void SwitchBootConfImage(string ip, string machinename) {
        this.Invoke("SwitchBootConfImage", new object[] {
                    ip,
                    machinename});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSwitchBootConfImage(string ip, string machinename, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SwitchBootConfImage", new object[] {
                    ip,
                    machinename}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSwitchBootConfImage(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void SwitchBootConfImageAsync(string ip, string machinename) {
        this.SwitchBootConfImageAsync(ip, machinename, null);
    }
    
    /// <remarks/>
    public void SwitchBootConfImageAsync(string ip, string machinename, object userState) {
        if ((this.SwitchBootConfImageOperationCompleted == null)) {
            this.SwitchBootConfImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSwitchBootConfImageOperationCompleted);
        }
        this.InvokeAsync("SwitchBootConfImage", new object[] {
                    ip,
                    machinename}, this.SwitchBootConfImageOperationCompleted, userState);
    }
    
    private void OnSwitchBootConfImageOperationCompleted(object arg) {
        if ((this.SwitchBootConfImageCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SwitchBootConfImageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SwitchBootConfLocal", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void SwitchBootConfLocal(string ip, string machinename) {
        this.Invoke("SwitchBootConfLocal", new object[] {
                    ip,
                    machinename});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSwitchBootConfLocal(string ip, string machinename, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SwitchBootConfLocal", new object[] {
                    ip,
                    machinename}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSwitchBootConfLocal(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void SwitchBootConfLocalAsync(string ip, string machinename) {
        this.SwitchBootConfLocalAsync(ip, machinename, null);
    }
    
    /// <remarks/>
    public void SwitchBootConfLocalAsync(string ip, string machinename, object userState) {
        if ((this.SwitchBootConfLocalOperationCompleted == null)) {
            this.SwitchBootConfLocalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSwitchBootConfLocalOperationCompleted);
        }
        this.InvokeAsync("SwitchBootConfLocal", new object[] {
                    ip,
                    machinename}, this.SwitchBootConfLocalOperationCompleted, userState);
    }
    
    private void OnSwitchBootConfLocalOperationCompleted(object arg) {
        if ((this.SwitchBootConfLocalCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SwitchBootConfLocalCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ClientLog", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void ClientLog(string message, string client) {
        this.Invoke("ClientLog", new object[] {
                    message,
                    client});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginClientLog(string message, string client, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ClientLog", new object[] {
                    message,
                    client}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndClientLog(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void ClientLogAsync(string message, string client) {
        this.ClientLogAsync(message, client, null);
    }
    
    /// <remarks/>
    public void ClientLogAsync(string message, string client, object userState) {
        if ((this.ClientLogOperationCompleted == null)) {
            this.ClientLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClientLogOperationCompleted);
        }
        this.InvokeAsync("ClientLog", new object[] {
                    message,
                    client}, this.ClientLogOperationCompleted, userState);
    }
    
    private void OnClientLogOperationCompleted(object arg) {
        if ((this.ClientLogCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ClientLogCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetConfig", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public ImageConfig GetConfig(string mac) {
        object[] results = this.Invoke("GetConfig", new object[] {
                    mac});
        return ((ImageConfig)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetConfig(string mac, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetConfig", new object[] {
                    mac}, callback, asyncState);
    }
    
    /// <remarks/>
    public ImageConfig EndGetConfig(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((ImageConfig)(results[0]));
    }
    
    /// <remarks/>
    public void GetConfigAsync(string mac) {
        this.GetConfigAsync(mac, null);
    }
    
    /// <remarks/>
    public void GetConfigAsync(string mac, object userState) {
        if ((this.GetConfigOperationCompleted == null)) {
            this.GetConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetConfigOperationCompleted);
        }
        this.InvokeAsync("GetConfig", new object[] {
                    mac}, this.GetConfigOperationCompleted, userState);
    }
    
    private void OnGetConfigOperationCompleted(object arg) {
        if ((this.GetConfigCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetConfigCompleted(this, new GetConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateConfig", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void CreateConfig(string[] macs, string machinename, string disks) {
        this.Invoke("CreateConfig", new object[] {
                    macs,
                    machinename,
                    disks});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCreateConfig(string[] macs, string machinename, string disks, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateConfig", new object[] {
                    macs,
                    machinename,
                    disks}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCreateConfig(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void CreateConfigAsync(string[] macs, string machinename, string disks) {
        this.CreateConfigAsync(macs, machinename, disks, null);
    }
    
    /// <remarks/>
    public void CreateConfigAsync(string[] macs, string machinename, string disks, object userState) {
        if ((this.CreateConfigOperationCompleted == null)) {
            this.CreateConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateConfigOperationCompleted);
        }
        this.InvokeAsync("CreateConfig", new object[] {
                    macs,
                    machinename,
                    disks}, this.CreateConfigOperationCompleted, userState);
    }
    
    private void OnCreateConfigOperationCompleted(object arg) {
        if ((this.CreateConfigCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CreateConfigCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
public partial class ImageConfig {
    
    private string machinenameField;
    
    private string disksField;
    
    private bool sendMailField;
    
    private string mapDriveField;
    
    private string mapShareField;
    
    private string mapUserField;
    
    private string mapPasswordField;
    
    /// <remarks/>
    public string Machinename {
        get {
            return this.machinenameField;
        }
        set {
            this.machinenameField = value;
        }
    }
    
    /// <remarks/>
    public string Disks {
        get {
            return this.disksField;
        }
        set {
            this.disksField = value;
        }
    }
    
    /// <remarks/>
    public bool SendMail {
        get {
            return this.sendMailField;
        }
        set {
            this.sendMailField = value;
        }
    }
    
    /// <remarks/>
    public string MapDrive {
        get {
            return this.mapDriveField;
        }
        set {
            this.mapDriveField = value;
        }
    }
    
    /// <remarks/>
    public string MapShare {
        get {
            return this.mapShareField;
        }
        set {
            this.mapShareField = value;
        }
    }
    
    /// <remarks/>
    public string MapUser {
        get {
            return this.mapUserField;
        }
        set {
            this.mapUserField = value;
        }
    }
    
    /// <remarks/>
    public string MapPassword {
        get {
            return this.mapPasswordField;
        }
        set {
            this.mapPasswordField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public delegate void SwitchBootConfImageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public delegate void SwitchBootConfLocalCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public delegate void ClientLogCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public delegate void GetConfigCompletedEventHandler(object sender, GetConfigCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public ImageConfig Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((ImageConfig)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public delegate void CreateConfigCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
